import streamlit as st
from PIL import Image
from scripts import eda, results
from pages import library_map
import pandas as pd

st.set_page_config(page_title="mBARq App", layout='wide',
                   page_icon=Image.open("images/image.png")
                    )
st.image("images/mbarq-logo.png")


class LoadDataSet:

    def __init(self, kind='map'):
        self.df = pd.DataFrame()







def home_page():


    # Sidebar setup
    st.sidebar.title('Data Upload')
    map_file = st.sidebar.file_uploader('Upload a mutant library map file', key='map')
    count_file = st.sidebar.file_uploader('Upload a file containing earthquake data', key='cnt')
    sample_file = st.sidebar.file_uploader('Upload a file containing earthquake data', key='sample')
    results_file = st.sidebar.file_uploader('Upload a file containing earthquake data', key='res')

    if map_file is not None:
        map_df = pd.read_csv(map_file)
        st.session_state['map_file'] = map_file
        st.session_state['map_df'] = map_df

    if count_file is not None:
        count_df = pd.read_csv(count_file)
        st.session_state['count_file'] = count_file
        st.session_state['count_df'] = count_df

    if sample_file is not None:
        sample_df = pd.read_csv(sample_file)
        st.session_state['sample_file'] = sample_file
        st.session_state['sample_df'] = sample_df

    if results_file is not None:
        results_df = pd.read_csv(results_file)
        st.session_state['results_file'] = results_file
        st.session_state['results_df'] = results_df



    if 'map_file' in st.session_state.keys():
        st.sidebar.write(f'Currently loaded libary map: {st.session_state["map_file"].name}')



    # Check if file has been uploaded






    url = "https://github.com/MicrobiologyETHZ/mbarq"
    docs_url = "https://mbarq.readthedocs.io/en/latest/"

    st.markdown(f""" 
    
    #
    
    
  ##### Transposon mutagenesis is a powerful technique that allows identification of bacterial fitness factors under different environmental conditions. Recently, a number of studies have used barcoded transposon mutant libraries to increase the throughput of the experiments. mBARq allows easy processing and analysis of barcoded mutant libraries for any transposon construct. To learn more about analysis of barcoded sequencing data using mBARq,  please read [the documentation]({docs_url}). This app allows exploration of data analyzed with [mBARq tool]({url}).

    ## Pages:

    1. ### üìç Library Map: 

        - Allows you to visualize the insertions found in your library and provides some basic summary statistics.
        - Requires mapping file generated by `mbarq map` command
    
    ***

    2. ### üìà Exploratory Analysis: 

        - Generates an interactive PCA plot
        - Generates barcode abundance plots for genes of interest
        - Requires merged count file generated by `mbarq count` and a the same sample data file used for the analysis

    ***
    
    3. ### üìä Differential Abundance Results

        - Visualize differential abundance results for all genes or specific KEGG pathways
        - Draw heatmaps of log fold changes across the conditions for specific KEGG pathways
        - Requires a `gene summary` files generated by `mbarq analyze` command and a `gmt` file


    """)

home_tab, eda_tab, dea_tab = st.tabs(["Home",
                               "   üìà Exploratory Analysis   ", '   üìä Differential Abundance'])
with home_tab:
    home_page()

# with lib_tab:
#     library_map.app()

with eda_tab:
    eda.app()

with dea_tab:
    results.app()

