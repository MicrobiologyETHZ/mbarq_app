import streamlit as st
from PIL import Image

st.set_page_config(page_title="mBARq App", layout='wide',
                   page_icon=Image.open("images/image.png")
                   )
st.image("images/mbarq-logo.png")


def home_page():
    repo_url = "https://github.com/MicrobiologyETHZ/mbarq"
    docs_url = "https://mbarq.readthedocs.io/en/latest/"
    string_url = "https://string-db.org/"
    kegg_url = "https://www.genome.jp/kegg/"
    st.info(f""" 
    
    DNA barcoding has become a powerful tool for assessing the fitness of strains in a variety of studies, including random transposon mutagenesis screens, attenuation of site-directed mutants, and population dynamics of isogenic strain pools. For example, an addition of a random DNA barcode sequence into each transposon have significantly increased experimental throughput of random transposon mutagenesis screens and allowed in depth characterization of gene fitness across multiple bacterial species. To facilitate the data analysis of such screens, we provide mBARq (pronounced: ‚Äòembark‚Äô), a versatile and user-friendly framework for the analysis and interpretation of RB-TnSeq and other barcoded sequencing data. [Our command line tool]({repo_url}) allows mapping, counting and statistical analysis of RB-TnSeq data.  This companion web app enables customized quality control, visualization of the results and exploratory data analysis via integration with the [STRING]({string_url}) and [KEGG]({kegg_url}) databases.  To learn more about the analysis of barcoded sequencing data using mBARq, please read the [documentation]({docs_url}). 
   
    """)

    map_url = 'https://mbarq.readthedocs.io/en/latest/mapping.html'
    st.markdown(f"""
  
    
    ## Pages:
    
    Below is a quick summary of each of the pages, visit each of the pages to browse the example data set. Our example dataset was produced by re-analysing RB-TnSeq data from [this Salmonella pathogenesis study](https://doi.org/10.1016/j.chom.2020.04.013) with `mBARq`. 
        
    
    ### ‚¨ÜÔ∏è Data Upload 

    - On this page, you can upload all of the data tables produced by the `mbarq` command line tool. 
        
    ***
    
    ### üìç Library Map 
    
    - Requires a `csv` file generated by the [`mbarq map`]({map_url}) command. This file lists the insertion site of each barcode in your mutant library.  
    - This page allows you to visualize the insertions found in your library and provides some basic summary statistics. 
        
    
    """)

    st.markdown("""
    ***
    
    ### üìà Exploratory Data Analysis
    
    - Requires a `csv` file with barcode counts for each sample. This file is generated by `mbarq count` and `mbarq merge` commands.
    - Also requires a `csv` file describing the experimental design (sample data file).
    - This page generates an interactive PCA plot and barcode abundance plots for genes of interest.
        
    """)

    st.markdown("""
        
    ***
    
    ### üìä Differential Abundance
    - Requires a `csv` file produced by `mbarq analyze` command. This file lists log fold changes (LFC) and false discover rates (FDRs) for each gene in the library.
    - This page allows you to look at the 'hits' and create heatmaps of LFCs for genes of interest.

    ***
    
    ### üß∂ STRING  
    - Requires a `csv` file produced by `mbarq analyze` command. This file lists log fold changes (LFC) and false discover rates (FDRs) for each gene in the library.
    - This page allows you to perform functional analysis via STRING-db.
    ***
    
    ### ü•ö KEGG
    - Requires a `csv` file produced by `mbarq analyze` command. This file lists log fold changes (LFC) and false discover rates (FDRs) for each gene in the library.
    - This page allows you to visualize the results in the context of KEGG metabolic maps.
        """)


home_page()
