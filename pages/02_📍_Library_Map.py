from pathlib import Path
import pandas as pd
import streamlit as st
from scripts.datasets import LibraryMap, convert_df
from scripts.graphs import define_color_scheme
import plotly.graph_objects as go
import yaml
st.set_page_config(layout='wide')


def app():
    config_file = "scripts/config.yaml"
    with open(config_file, 'r') as cf:
        config = yaml.load(cf, Loader=yaml.SafeLoader)


    st.markdown(""" # Library Map """)
    with st.expander('How this works: '):
        url = config['links']['mapping_url']
        st.markdown(f"""

        ### Visualize insertion position along the genome.

        - For this page, you need to upload a library map file, which is a **csv** file produced by `mbarq map`. Instructions on how to generate this file can be found [here]({url}). 
        - The library map file has to include the following columns: 
            - `barcode`
            - `abundance_in_mapping_library`
            - `insertion_site`
            - `chr`
            - `distance_to_feature`
        - You can load more than one library file at the same time to compare.
        - You can select which sequence (e.g. chromosome or plasmids) to display, and color the insertions by the library (if multiple files are loaded), or whether the insertion is inside a CDS.
        - You can click on the figure legend to only show a specific subset of data (i.e. if looking at multiple libraries, double-clicking on a specific library name will show data for that library only).
        
        """)

    with st.container():
        # Get the data
        if 'lib_map' in st.session_state.keys():
            lm = st.session_state['lib_map']
        else:
            nguyen_2020 = config['links']['nguyen_2020']
            nguyen_2024 = config['links']['nguyen_2024']
            salmonella_workflow_url = config['links']['salmonella_workflow']
            mbarq_paper = config['links']['mbarq_paper']
            st.info(
                f'Below you can browse the results of two RB-TnSeq *Salmonella* screens. To analyze your own data,  please go to **⬆️ Data Upload** page. The library maps available below were generated by running the `mbarq map` command on raw sequencing data from the [Nguyen et al 2020 study]({nguyen_2020}) and the [Nguyen et al 2024 study]({nguyen_2024}). For more information about the analysis, please see the [mBARq documentation]({salmonella_workflow_url}) and the [mBARq paper]({mbarq_paper}).')
            if 'study' not in st.session_state.keys():
                st.session_state['study'] = 19

            col1, col2 = st.columns(2)
            with col1:
                button1 = st.button('**Nguyen et al., 2020**')
            with col2:
                button2 = st.button('**Nguyen et al., 2024**')

            if button1:
                st.session_state['study'] = 19
            if button2:
                st.session_state['study'] = 24

            if st.session_state['study'] == 19:
                st.warning(
                    f"Showing mapping file from the [Nguyen et al., 2020 study]({nguyen_2020})")
                map_files = [
                    Path('examples/example_library_map.annotated.csv')]
                df = pd.read_csv(map_files[0])
                df["library"] = 'library_10_1'  # check this
                lm = LibraryMap(map_df=df)
            else:
                # todo update the link when published
                st.warning(
                    f"Showing mapping file from the [Nguyen et al., 2024 study]({nguyen_2024})")
                map_files = list(
                    Path('examples/nguyen_2024/maps/').rglob("*.csv.gz"))
                lm = LibraryMap(map_files=map_files)
            lm.load_map(silent=True)
            lm.validate_lib_map()
            st.download_button(
                label="Download mapping data as CSV",
                data=convert_df(lm.lib_map),
                file_name='Nguyen_library_mapping_file.csv',
                mime='text/csv',
            )

        if lm.lib_map.empty:
            st.error(f"""⚠️ Something went wrong when processing library map files. 
                            Please check the file formats and try again ⚠️""")
            st.stop()
        if st.checkbox("Show sample of the Library Map?"):
            st.write(lm.lib_map.sample(5))

        # Generate summary stats for the libraries
        with st.container():
            lm.get_stats()
            st.markdown("#### Insertion Summary")
            st.table(lm.stats)
        # Graph coverage map or individual insertion abundance
        with st.container():
            # Define colors
            colors, alphabetClrs, all_clrs = define_color_scheme()
            graph_type = st.radio(
                "Choose the graph type", ['Coverage Histogram', 'Individual Insertions'])
            c1, c2, c3 = st.columns(3)
            chr_col_choice = c1.selectbox(
                'Choose a sequence to display', lm.lib_map[lm.chr_col].unique())
            if graph_type == 'Individual Insertions':
                color_by_choice = c2.selectbox('Color by', lm.color_by_cols)
                fig = lm.graph_insertions(
                    chr_col_choice, color_by_choice, all_clrs)
            else:
                try:
                    num_bins = c2.number_input(
                        'Number of bins', value=100, min_value=10, max_value=1000)
                    hist_col = c3.text_input(
                        'Color (hex, rgb, hsl, hsv, or color name)', value=colors['teal'])
                    fig = lm.graph_coverage_hist(
                        chr_col_choice, num_bins, hist_col)
                except ValueError:
                    st.write(
                        "Please enter a valid color. The following formats are accepted: hex, rgb, hsl, hsv or color name")
                    return

            st.plotly_chart(fig, use_container_width=True)

    with st.container():
        st.subheader('Needle Plot')
        if not all([x in lm.lib_map.columns for x in ['gene_start', 'gene_end', 'gene_strand', 'percentile']]):
            st.warning("Missing information about gene start/end/strand")
        else:
            co1, co2, co3 = st.columns(3)
            att_choice = co1.selectbox('Choose gene identifier', lm.attributes)
            gene_choice = co2.selectbox(
                'Choose a gene to display', lm.lib_map[att_choice].unique())
            library_choice = co3.selectbox(
                'Choose a library to display', lm.lib_map['library'].unique())
            lol_df = lm.lib_map[(lm.lib_map[att_choice] == gene_choice) & (
                lm.lib_map['library'] == library_choice)]

            # Offset the line length by the marker size to avoid overlapping
            if lol_df.empty:
                st.warning('No insertions in that gene found')
            else:
                marker_offset = 0.02

                def offset_signal(signal, marker_offset):
                    if abs(signal) <= marker_offset:
                        return 0
                    return signal - marker_offset if signal > 0 else signal + marker_offset

                insertion_sites = list(lol_df.insertion_site.values)
                start = lol_df.gene_start.min()
                end = lol_df.gene_end.max()
                gene_start = start if lol_df.gene_strand.unique() == '+' else end
                data = [go.Scatter(
                    x=insertion_sites,
                    y=[1]*len(insertion_sites),
                    mode='markers+text',
                    marker=dict(color='#008080', size=12),
                    text=lol_df.percentile.values,
                    textposition='top center'
                )
                ]
                layout = go.Layout(
                    shapes=[dict(
                        type='line',
                        xref='x',
                        yref='y',
                        x0=i,
                        y0=0,
                        x1=i,
                        y1=1-marker_offset,
                        line=dict(
                            color='black',
                            width=2
                        )
                    ) for i in insertion_sites] +
                    [dict(type="rect",
                          x0=start,
                          y0=0,
                          x1=end,
                          y1=0.3,
                          line=dict(
                              color="#cc5a2a",
                              width=2,
                          ),

                          )],
                    yaxis={

                        'showgrid': False,  # thin lines in the background
                        'zeroline': False,  # thick line at x=0
                        'visible': False,  # numbers below
                    })
                fig = go.Figure(data, layout)
                fig.update_xaxes(range=[start-100, end+100])
                fig.add_shape(
                    type="line",
                    x0=gene_start,
                    y0=0,
                    x1=gene_start,
                    y1=0.3,
                    line_width=7,
                    label=dict(text="Gene start")
                )
                st.plotly_chart(fig)


app()
