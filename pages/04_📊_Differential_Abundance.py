import streamlit as st
from scripts.datasets import ResultDataSet
from pathlib import Path
import yaml
st.set_page_config(layout='wide')


def app():
    config_file = "scripts/config.yaml"
    with open(config_file, 'r') as cf:
        config = yaml.load(cf, Loader=yaml.SafeLoader)

    st.markdown(""" # Fitness Results """)
    with st.expander('How this works: '):
        an_url = config['links']['analysis_url']
        st.markdown(f"""
        
        #### Fitness data: 
        - For this page, you need to upload a `csv` file produced by the `mbarq analyze` command. To learn more about how to use `mbarq analyze`, please read [here]({an_url}).
        - The first column must be a gene identifier (for example, locus tag). 
        - Must also include `LFC` and `contrast` columns, where `LFC` is the log2 fold change in gene abundance for a specific treatment compared to control, and `contrast` specifies the treatment.  
        - You can define hits by setting LFC and FDR cutoffs, and visualize them either by rank or via heatmaps. 
        
        """)

    with st.container():
        # Get the data
        if 'results_ds' in st.session_state.keys():
            rds = st.session_state['results_ds']
            #gene_id = st.session_state['results_gene_id']
        else:
            nguyen_2020 = config['links']['nguyen_2020']
            nguyen_2024 = config['links']['nguyen_2024']
            salmonella_workflow_url = config['links']['salmonella_workflow']
            mbarq_paper = config['links']['mbarq_paper']
            st.info(
                f'Below you can browse the results of two RB-TnSeq *Salmonella* screens. To analyze your own data,  please go to **⬆️ Data Upload** page. The results available below were generated by running the `mbarq analyze` command on count data from the [Nguyen et al 2020 study]({nguyen_2020}) and [Nguyen et al 2024 study]({nguyen_2024}). For more information about the analysis, please see the [mBARq documentation]({salmonella_workflow_url}) and the [mBARq paper]({mbarq_paper}).')
            
            if 'study' not in st.session_state.keys():
                st.session_state['study'] = 19
                
            col1, col2 = st.columns(2)
            with col1:
                button1 = st.button('**Nguyen et al., 2020**')
            with col2:
                button2 = st.button('**Nguyen et al., 2024**')
            if button1:
                st.session_state['study'] = 19
            if button2: 
                st.session_state['study'] = 24
                
            if st.session_state['study'] == 19:
                st.warning(
                    f"Showing mapping file from the [Nguyen et al., 2020 study]({nguyen_2020})")
                result_files = [Path("examples/example_rra_results_annotated.csv")]
                gene_id = 'Name'
                rds = ResultDataSet(result_files=result_files, gene_id=gene_id)
                rds.load_results()
                rds.validate_results_df()

                if st.checkbox('Show sample of the dataset'):
                    try:
                        st.write(rds.results_df.sample(5))
                    except ValueError:
                        st.write('Result table is empty')
            else:
                st.warning(
                    f"Showing mapping file from the [Nguyen et al., 2024 study]({nguyen_2024})")
                result_files = list(Path("examples/nguyen_2024/results").rglob("*rra_results*"))
                gene_id = 'Name'
                rds = ResultDataSet(result_files=result_files, gene_id=gene_id)
                rds.load_results(silent=True)
                rds.validate_results_df()

    if not rds.results_df.empty:
        contrasts = rds.results_df[rds.contrast_col].sort_values().unique()
        libraries = rds.results_df[rds.library_col].sort_values().unique()
        st.subheader("Fitness Results")
        if len(libraries) > 1:
            libraries = ['All'] + list(libraries)
            library_to_show = st.selectbox('Select experiment to show', libraries)
        else:
            library_to_show = libraries[0]
        # SUBSET DATAFRAME TO SPECIFIC CONTRAST AND LIBRARY
        contrast_col, lfc_col1, lfc_col2, fdr_col = st.columns(4)
        contrast_to_show = contrast_col.multiselect('Select a contrast', contrasts, default=contrasts[0])
        fdr_th = fdr_col.number_input('FDR cutoff', value=0.05)
        type_lfc_th = lfc_col1.radio('Absolute LFC cutoff or define range', ['Absolute', 'Range'])
        if type_lfc_th == 'Absolute':
            lfc_low = lfc_col2.number_input('Log FC cutoff (absolute)', min_value=0.0, step=0.5, value=1.0)
            lfc_hi = None
        else:
            lfc_low = lfc_col2.number_input('Min Log FC',  step=0.5, value=-5.0)
            lfc_hi = lfc_col2.number_input('Max Log FC',  step=0.5, value=-1.0)

        rds.identify_hits(library_to_show,  lfc_low, lfc_hi, fdr_th)
        multiple_libs = True if library_to_show == 'All' else False
        fig = rds.graph_by_rank(contrast=contrast_to_show, kegg=False, multiple_libs=multiple_libs)
        st.plotly_chart(fig, use_container_width=True)
        st.subheader('Fitness heatmaps')
        gene_options = rds.results_df[rds.gene_id].unique()
        defaults = [g for g in ['rfaB', 'rfaC', 'rfaG', 'rfaI', 'hilC', 'hilD'] if g in gene_options]
        genes = st.multiselect('Choose genes of interest', gene_options, default=defaults)
        if genes:
            fig = rds.graph_heatmap(genes)
            st.plotly_chart(fig, use_container_width=True)


app()
